openapi: 3.0.0

info:
  title: Tapakila API (Ticket_place)
  description: API for managing tickets 
  version: 1.0.0

servers:
  - url: https://tapakila-backend.onrender.com
    description: Testing server

paths:
  /users:
    get:
      summary: Retrieve all users
      description: Returns a list of all registered users
      tags:
        - User
      operationId: GetUsers
      responses:
        "200":
          description: List of users retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new user
      description: Adds a new user to the system.
      tags:
        - User
      operationId: CreateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "201":
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieve details of a specific user by their unique ID.
      tags:
        - User
      operationId: GetUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a user
      description: Update the details of an existing user.
      tags:
        - User
      operationId: UpdateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
      responses:
        "200":
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a user
      description: Deletes a user by their ID.
      tags:
        - User
      operationId: DeleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully.
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /roles:
    get:
      summary: Retrieve all roles
      description: Returns a list of all registered roles
      tags:
        - Role
      operationId: GetRoles
      responses:
        "200":
          description: List of roles retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new role
      description: Adds a new role to the system.
      tags:
        - Role
      operationId: CreateRole
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRole"
      responses:
        "201":
          description: Role created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /roles/{id}:
    get:
      summary: Get a role by ID
      description: Retrieve details of a specific role by their unique ID.
      tags:
        - Role
      operationId: GetRoleById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Role details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a role
      description: Update the details of an existing role.
      tags:
        - Role
      operationId: UpdateRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRole"
      responses:
        "200":
          description: Role updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a role
      description: Deletes a role by their ID.
      tags:
        - Role
      operationId: DeleteRole
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully.
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /countries:
    get:
      summary: Retrieve all countries
      description: Returns a list of all registered countries
      tags:
        - Country
      operationId: GetCountries
      responses:
        "200":
          description: List of countries retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Country"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new country
      description: Adds a new country to the system.
      tags:
        - Country
      operationId: CreateCountry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCountry"
      responses:
        "201":
          description: country created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /countries/{id}:
    get:
      summary: Get a country by ID
      description: Retrieve details of a specific country by their unique ID.
      tags:
        - Country
      operationId: GetCountryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Country details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a country
      description: Update the details of an existing country.
      tags:
        - Country
      operationId: UpdateCountry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCountry"
      responses:
        "200":
          description: Country updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Country"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a country
      description: Deletes a country by their ID.
      tags:
        - Country
      operationId: DeleteCountry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User deleted successfully.
        "404":
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /events:
    get:
      summary: Retrieve all events
      description: Returns a list of all registered events
      tags:
        - Event
      operationId: GetEvents
      responses:
        "200":
          description: List of events retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new event
      description: Adds a new event to the system.
      tags:
        - Event
      operationId: CreateEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
      responses:
        "201":
          description: event created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /events/{id}:
    get:
      summary: Get a event by ID
      description: Retrieve details of a specific event by their unique ID.
      tags:
        - Event
      operationId: GetEventById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Event details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "404":
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update an event
      description: Update the details of an existing event.
      tags:
        - Event
      operationId: UpdateEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvent"
      responses:
        "200":
          description: Event updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete an event
      description: Deletes an event by their ID.
      tags:
        - Event
      operationId: DeleteEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Event deleted successfully.
        "404":
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /event_halls:
    get:
      summary: Retrieve all events hall
      description: Returns a list of all registered events hall
      tags:
        - Event_hall
      operationId: GetEventsHall
      responses:
        "200":
          description: List of events hall retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EventHall"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new event hall
      description: Adds a new event hall to the system.
      tags:
        - Event_hall
      operationId: CreateEventHall
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventHall"
      responses:
        "201":
          description: Event hall created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHall"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /events_hall/{id}:
    get:
      summary: Get a event hall by ID
      description: Retrieve details of a specific event hall by their unique ID.
      tags:
        - Event_hall
      operationId: GetEventHallById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Event hall details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHall"
        "404":
          description: Event hall not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update an event hall
      description: Update the details of an existing event hall.
      tags:
        - Event_hall
      operationId: UpdateEventHall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventHall"
      responses:
        "200":
          description: Event hall updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventHall"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Event hall not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete an event hall
      description: Deletes an event hall by their ID.
      tags:
        - Event_hall
      operationId: DeleteEventHall
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Event  hall deleted successfully.
        "404":
          description: Event hall not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /ticket_verification:
    get:
      summary: Retrieve all tickets verification
      description: Returns a list of all registered tickes verification
      tags:
        - Ticket_verification
      operationId: GetTicketVerification
      responses:
        "200":
          description: List of tickets verification retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TicketVerification"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new ticket verification
      description: Adds a new ticket verification to the system.
      tags:
        - Ticket_verification
      operationId: CreateTicketVerification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTicketVerification"
      responses:
        "201":
          description: Ticket verification created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketVerification"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /ticket_verification/{id}:
    get:
      summary: Get a ticket verification by ID
      description: Retrieve details of a specific ticket verification by their unique ID.
      tags:
        -  Ticket_verification
      operationId: GetTicketVerificationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description:  Ticket verification details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketVerification"
        "404":
          description:  Ticket verification not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a ticket verification
      description: Update the details of an existing ticket verification.
      tags:
        -  Ticket_verification
      operationId: UpdateTicketVerification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTicketVerification"
      responses:
        "200":
          description:  Ticket verification updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketVerification"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description:  Ticket verification not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a ticket verification
      description: Deletes a  ticket verification by their ID.
      tags:
        -  Ticket_verification
      operationId: DeleteTicketVerification
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description:  Ticket verification deleted successfully.
        "404":
          description:  Ticket verification not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /feedbacks:
    get:
      summary: Retrieve all Feedbacks
      description: Returns a list of all registered Feedbacks
      tags:
        - Feedbacks
      operationId: GetFeedbacks
      responses:
        "200":
          description: List of feedbacks retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Feedbacks"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new Feedback
      description: Adds a new Feedback to the system.
      tags:
        - Feedbacks
      operationId: CreateFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFeedbacks"
      responses:
        "201":
          description: Feedback created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedbacks"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /feedbacks/{id}:
    get:
      summary: Get a feedback by ID
      description: Retrieve details of a specific feedback by their unique ID.
      tags:
        -  Feedbacks
      operationId: GetFeedbacksById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description:  Feedback details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedbacks"
        "404":
          description:  Feedbacks not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a feedback verification
      description: Update the details of an existing feedback.
      tags:
        -  Feedbacks
      operationId: UpdateFeedbacks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFeedbacks"
      responses:
        "200":
          description:  Feedbacks updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Feedbacks"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description:  Feedbacks not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a Feedback
      description: Deletes a Feedbacks by their ID.
      tags:
        -  Feedbacks
      operationId: DeleteFeedbacks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description:  Feedbacks deleted successfully.
        "404":
          description:  Feedbacks not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /tickets:
    get:
      summary: Retrieve all tickets
      description: Returns a list of all registered tickets
      tags:
        - Tickets
      operationId: GetTickets
      responses:
        "200":
          description: List of Tickets retrieved successfully
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    post:
      summary: Create a new Ticket
      description: Adds a new Ticket to the system.
      tags:
        - Tickets
      operationId: CreateTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTicket"
      responses:
        "201":
          description: Ticket created successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: Bad request (invalid input).
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /tickets/{id}:
    get:
      summary: Get a ticket by ID
      description: Retrieve details of a specific ticket by their unique ID.
      tags:
        -  Tickets
      operationId: GetTicketById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description:  Ticket details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "404":
          description:  Ticket not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      summary: Update a ticket verification
      description: Update the details of an existing ticket.
      tags:
        -  Tickets
      operationId: UpdateTicket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTicket"
      responses:
        "200":
          description:  Ticket updated successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description:  Ticket not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Delete a Ticket
      description: Deletes a Ticket by their ID.
      tags:
        -  Tickets
      operationId: DeleteTicket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description:  Ticket deleted successfully.
        "404":
          description:  Ticket not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    CreateUser:
      type: object
      required:
        - username
        - email
        - password
      properties:
        role_id:
          type: string
          format: uuid
          example: "c4c71626-12a6-40ad-a126-00b70f2e40c1"
          nullable: true
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "strongpassword123"
        image_url:
          type: string
          format: uri
          example: "https://example.com/images/john.jpg"
        country_id:
          type: string
          format: uuid
    User:
      allOf:
        - $ref: "#/components/schemas/CreateUser"
        - type: object
          properties:
            id:
              type: string
              format: uuid
              example: "c4c71626-12a6-40ad-a126-00b70f2e40c1"
            email_verified_at:
              type: string
              format: date-time
              nullable: true
              example: "2024-03-07T14:30:00Z"
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true
              example: null
    CreateRole:
      required:
        - title
      type: object
      properties:
        title:
          type: string
    Role:
      allOf:
        - $ref: "#/components/schemas/CreateRole"
        - type: object
          properties:
            id:
              type: string
              format: uuid
              example: "c4c71626-12a6-40ad-a126-00b70f2e40c1"
            created_at:
              type: string
              format: date-time
              example: "2024-03-07T14:30:00Z"
            updated_at:
              type: string
              format: date-time
              nullable: true
              example: "2024-03-07T14:30:00Z"
    CreateCountry:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    Country:
      allOf:
        - $ref: "#/components/schemas/CreateCountry"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
    CreateEvent:
      type: object
      required:
        - event_hall
        - user_id
        - host_id
        - title
        - start_date
        - start_time
        - end_date
        - end_time
      properties:
        host_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        event_hall_id:
          type: string
          format: uuid
        title:
          type: string
        slug:
          type: string
        description:
          type: string
          format: text
        start_date:
          type: string
          format: date
        start_time:
          type: string
          format: time
        end_date:
          type: string
          format: date
        end_time:
          type: string
          format: time
        age_limit:
          type: integer
    Event:
      allOf:
        - $ref: "#/components/schemas/CreateEvent"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true
    CreateEventHall:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        description:
          type: string
          format: text
    EventHall:
      allOf:
        - $ref: "#/components/schemas/CreateEventHall"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true
    CreateTicketVerification:
      required:
        - ticket_id
        - user_id
      type: object
      properties:
        ticket_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        payment_confirmed:
          type: boolean  
          default: false
    TicketVerification:
      allOf:
        - $ref: "#/components/schemas/CreateTicketVerification"
        - type: object
          properties:
            id: 
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true
    CreateFeedbacks:
      required:
        - user_id
        - message
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        subject:
          type: string
        message:
          type: string
          format: text
    Feedbacks:
      allOf:
        - $ref: "#/components/schemas/CreateFeedbacks"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true
    CreateTicket:
      type: object
      properties:
        event_id:
          type: string
          format: uuid
        ticket_type_id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        ticket_number:
          type: string
        amount_paid:
          type: integer
          default: 0
        currency_id:
          type: string
          format: uuid
        payment_confirmed:
          type: boolean
          default: false
    Ticket:
      allOf:
        - $ref: "#/components/schemas/CreateTicket"
        - type: object
          properties:
            id:
              type: string
              format: uuid
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            delete_at:
              type: string
              format: date-time
              nullable: true
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "User not found"
        status:
          type: integer
          example: 404
        
        
  
   
   